#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mastering-express-application-development:server');
var http = require('http');
var nconf = require('nconf');
var models = require("../models");

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require("socket.io")(server);
global.io = io;
io.on("connection", function(socket) {
  socket.on("add-comment", function(msg) {
      models.Comment.create({
          "id": msg.id,
          "content": msg.content
      }).then(function(comments){
        io.emit("new-comment-" + msg.id, msg);
      });

  });

  socket.on("add-user", function(data){
      socket.join(data.username);
      socket.join("__public__");
  });

  socket.on("send-message", function(data){
      data.username = data.username || "__public__";
      io.to(data.username).emit("new-message", data);
  });

});


/**
 * Get port from environment and store in Express.
 */

app.set('port', nconf.get('http:port'));

/**
 * Listen on provided port, on all network interfaces.
 */

models.sequelize.sync().then(function () {
  server.listen(nconf.get("http:port"));
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
